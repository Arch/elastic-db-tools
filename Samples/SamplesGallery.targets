<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Target to produce the samples galleryzip file after compile is complete -->
  <Target Name="ProduceSamplesGalleryZipFile" AfterTargets="CoreCompile">
  
    <!-- Define samples gallery outputs -->
    <PropertyGroup>
      <!-- The file that gets transformed into the user's csproj when they create a new project from the samples gallery -->
      <SamplesGalleryProjectOutput>$(MSBuildProjectName).csproj</SamplesGalleryProjectOutput>
      
      <!-- The file that gets transformed into the user's sln when they create a new project from the samples gallery -->
      <SamplesGallerySolutionOutput>$(MSBuildProjectName).sln</SamplesGallerySolutionOutput>
    
      <!-- Intermediate directory that we copy the raw files into -->
      <SamplesGalleryFilesDir>$(IntermediateOutputPath)\SamplesGallery</SamplesGalleryFilesDir>
      
      <!-- Output path of the zip file that we produce from these files -->
      <SamplesGalleryZipPath>$(OutDir)\$(AssemblyName)SamplesGallery.zip</SamplesGalleryZipPath>
    </PropertyGroup>
    
    <!-- Verify that input .csproj and .sln are defined -->
    <Error Condition="'@(SamplesGalleryProjectInput)' == ''" Text="SamplesGalleryProjectInput is not defined in $(MSBuildProjectFullPath)" />
    <Error Condition="'@(SamplesGallerySolutionInput)' == ''" Text="SamplesGallerySolutionInput is not defined in $(MSBuildProjectFullPath)" />
  
    <!-- Delete the results of the previous build, to make sure we aren't copying stale files including build output -->
    <RemoveDir Directories="$(SamplesGalleryFilesDir)"/>
    <Delete Files="$(SamplesGalleryZipPath)"/>
  
    <!-- The source and content files. Don't include the CBT AssemblyVersion stuff -->
    <ItemGroup>
      <SamplesGalleryFiles Include="%(None.Identity)" />
      <SamplesGalleryFiles Include="%(Content.Identity)" />
      <SamplesGalleryFiles Include="%(Compile.Identity)" Condition="Exists('$(MSBuildProjectDirectory)\%(Compile.RelativeDir)')"/>
      <SamplesGalleryFiles Include="%(EmbeddedResource.Identity)" />
    </ItemGroup>
  
    <!-- Copy files to $(SamplesGalleryFilesDir) -->
    <Copy 
      SourceFiles="@(SamplesGalleryFiles)" 
      DestinationFolder="$(SamplesGalleryFilesDir)\$(MSBuildProjectName)\%(SamplesGalleryFiles.RelativeDir)"/>
    <Copy 
      SourceFiles="@(SamplesGalleryProjectInput)" 
      DestinationFiles="$(SamplesGalleryFilesDir)\$(MSBuildProjectName)\$(SamplesGalleryProjectOutput)" />
    <Copy 
      SourceFiles="@(SamplesGallerySolutionInput)" 
      DestinationFiles="$(SamplesGalleryFilesDir)\$(SamplesGallerySolutionOutput)" />

    <!-- Zip the files into $(SamplesGalleryZipPath) -->
    <Exec WorkingDirectory="$(SamplesGalleryFilesDir)" Command="powershell Add-Type -Assembly System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::CreateFromDirectory('$(SamplesGalleryFilesDir)', '$(SamplesGalleryZipPath)', [System.IO.Compression.CompressionLevel]::Optimal, $false)" />

    <!-- Run MSBuild on the output project to verify that it builds correctly
         We only do nuget restore in CBT because we need $(NugetBin). 
         If we could conveniently get $(NugetBin) in external build then we should just do that. 
         Instead we just xcopy the entire top-level packages folder to the location that the csproj expects. -->
    <Exec Condition="'$(StandaloneBuild)' != 'true'" WorkingDirectory="$(SamplesGalleryFilesDir)\$(MSBuildProjectName)\" Command="$(NugetBin) restore -PackagesDirectory ..\packages -Verbosity detailed" />
    <Exec Condition="'$(StandaloneBuild)' == 'true'" Command="powershell Copy-Item $(NugetPack) $(SamplesGalleryFilesDir)\packages -Recurse" />
    <MSBuild Projects="$(SamplesGalleryFilesDir)\$(MSBuildProjectName)\$(SamplesGalleryProjectOutput)" />
  </Target>
</Project>